/* Generated by AN DISI Unibo */ 
package it.unibo.butler_fridge_handler

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Butler_fridge_handler ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('sysRules.pl')","") //set resVar	
					}
					 transition( edgeName="goto",targetState="waitAction", cond=doswitch() )
				}	 
				state("waitAction") { //this:State
					action { //it:State
					}
					 transition(edgeName="t05",targetState="handleMsgFridge",cond=whenDispatch("handleMsgFridge"))
				}	 
				state("handleMsgFridge") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("handleMsgFridge(ACTION,NAME,CATEG,SYNC)"), Term.createTerm("handleMsgFridge(ACTION,NAME,CATEG,true)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								solve("assert(currentFood(${payloadArg(1)}))","") //set resVar	
								emit("msgFridge", "msgFridge(${payloadArg(0)},${payloadArg(1)},${payloadArg(2)})" ) 
								solve("assert(done(actionMsgFridgeSync,${payloadArg(0)},${payloadArg(1)},${payloadArg(2)}))","") //set resVar	
						}
						if( checkMsgContent( Term.createTerm("handleMsgFridge(ACTION,NAME,CATEG,SYNC)"), Term.createTerm("handleMsgFridge(ACTION,NAME,CATEG,false)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								emit("msgFridge", "msgFridge(${payloadArg(0)},${payloadArg(1)},${payloadArg(2)})" ) 
								solve("assert(done(actionMsgFridgeAsync,${payloadArg(0)},${payloadArg(1)},${payloadArg(2)}))","") //set resVar	
								forward("msgSent", "msgSent" ,"butler_fridge_handler" ) 
						}
					}
					 transition(edgeName="t06",targetState="actionDone",cond=whenDispatch("msgSent"))
					transition(edgeName="t07",targetState="handleReply",cond=whenDispatch("replyFridge"))
				}	 
				state("actionDone") { //this:State
					action { //it:State
						forward("actionComplete", "actionComplete" ,"butler_solver" ) 
					}
					 transition( edgeName="goto",targetState="waitAction", cond=doswitch() )
				}	 
				state("handleReply") { //this:State
					action { //it:State
						solve("currentFood(CIBO)","") //set resVar	
						if( checkMsgContent( Term.createTerm("replyFridge(STATUS)"), Term.createTerm("replyFridge(null)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
						}
						if( checkMsgContent( Term.createTerm("replyFridge(STATUS)"), Term.createTerm("replyFridge(present)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								forward("cmd", "cmd(successAddFood,${getCurSol("CIBO").toString()})" ,"butler_solver" ) 
						}
						if( checkMsgContent( Term.createTerm("replyFridge(STATUS)"), Term.createTerm("replyFridge(absent)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								emit("missingFood", "missingFood(${getCurSol("CIBO").toString()})" ) 
						}
					}
					 transition( edgeName="goto",targetState="actionDone", cond=doswitch() )
				}	 
			}
		}
}

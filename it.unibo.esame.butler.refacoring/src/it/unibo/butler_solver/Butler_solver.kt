/* Generated by AN DISI Unibo */ 
package it.unibo.butler_solver

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Butler_solver ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('sysRules.pl')","") //set resVar	
						solve("consult('cmds.pl')","") //set resVar	
						solve("consult('solverModel.pl')","") //set resVar	
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						solve("aggiornaStato(waitCmd,waiting,waiting)","") //set resVar	
					}
					 transition(edgeName="t011",targetState="solveCmd",cond=whenDispatch("cmd"))
				}	 
				state("solveCmd") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("cmd(CMD,ARG1)"), Term.createTerm("cmd(CMD,ARG1)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								solve("aggiornaStato(solveCmd,${payloadArg(0)},${payloadArg(1)})","") //set resVar	
								solve("comando(${payloadArg(0)},${payloadArg(1)})","") //set resVar	
						}
					}
					 transition( edgeName="goto",targetState="solveAction", cond=doswitch() )
				}	 
				state("solveAction") { //this:State
					action { //it:State
						solve("showSolverState","") //set resVar	
						solve("retract(azione(ARG0,ARG1,ARG2,ARG3,ARG4))","") //set resVar	
						if(currentSolution.isSuccess()){ val Action= currentSolution.getVarValue("ARG0").toString()
						if(Action=="check"){ val Number= currentSolution.getVarValue("ARG1").toString()
						forward("check", "check($Number)" ,"butler_test_handler" ) 
						 }
						if(Action=="wait"){ val Time= currentSolution.getVarValue("ARG1").toString()
						forward("wait", "wait($Time)" ,"butler_test_handler" ) 
						 }
						if(Action=="aggiungiOggetto"){ val Inventario= currentSolution.getVarValue("ARG1").toString()
						val Nome= currentSolution.getVarValue("ARG2").toString()
						val Categoria= currentSolution.getVarValue("ARG3").toString()
						forward("handleAdd", "handleAdd($Inventario,$Nome,$Categoria)" ,"butler_state_handler" ) 
						 }
						if(Action=="rimuoviOggetto"){ val Inventario= currentSolution.getVarValue("ARG1").toString()
						val Nome= currentSolution.getVarValue("ARG2").toString()
						val Categoria= currentSolution.getVarValue("ARG3").toString()
						forward("handleRemove", "handleRemove($Inventario,$Nome,$Categoria)" ,"butler_state_handler" ) 
						 }
						if(Action=="spostaOggetto"){ val InventarioMitt= currentSolution.getVarValue("ARG1").toString()
						val InventarioDest= currentSolution.getVarValue("ARG2").toString()
						val Nome= currentSolution.getVarValue("ARG3").toString()
						val Categoria= currentSolution.getVarValue("ARG4").toString()
						forward("handleSwap", "handleSwap($InventarioMitt,$InventarioDest,$Nome,$Categoria)" ,"butler_state_handler" ) 
						 }
						if(Action=="notificaFrigo"){ val Azione= currentSolution.getVarValue("ARG1").toString()
						val Nome= currentSolution.getVarValue("ARG2").toString()
						val Categoria= currentSolution.getVarValue("ARG3").toString()
						val Sync = currentSolution.getVarValue("ARG4").toString()
						forward("handleMsgFridge", "handleMsgFridge($Azione,$Nome,$Categoria,$Sync)" ,"butler_fridge_handler" ) 
						 }
						if(Action=="movimento"){ val Destinazione = getCurSol("ARG1").toString()
						forward("handleMovement", "handleMovement($Destinazione)" ,"butler_pathfinder_handler" ) 
						 }
						 }
						else
						 { forward("allActionsDone", "allActionsDone" ,"butler_solver" ) 
						  }
					}
					 transition(edgeName="t012",targetState="stoppedSolvedAction",cond=whenEvent("stopAppl"))
					transition(edgeName="t013",targetState="solveAction",cond=whenDispatch("actionComplete"))
					transition(edgeName="t014",targetState="waitCmd",cond=whenDispatch("allActionsDone"))
				}	 
				state("stoppedSolvedAction") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						solve("aggiornaStato(stoppedSolvedAction)","") //set resVar	
					}
					 transition(edgeName="t015",targetState="restartSolvedAction",cond=whenEvent("reactivateAppl"))
				}	 
				state("restartSolvedAction") { //this:State
					action { //it:State
						solve("assert(done(restartSolvedAction))","") //set resVar	
						solve("aggiornaStato(restartSolvedAction)","") //set resVar	
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition(edgeName="t016",targetState="stoppedSolvedAction",cond=whenEvent("stopAppl"))
					transition(edgeName="t017",targetState="solveAction",cond=whenDispatch("actionComplete"))
					transition(edgeName="t018",targetState="waitCmd",cond=whenDispatch("allActionsDone"))
				}	 
			}
		}
}

/* Generated by AN DISI Unibo */ 
package it.unibo.butler_test_handler

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Butler_test_handler ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('sysRules.pl')","") //set resVar	
					}
					 transition( edgeName="goto",targetState="waitAction", cond=doswitch() )
				}	 
				state("waitAction") { //this:State
					action { //it:State
					}
					 transition(edgeName="t020",targetState="testPipeline",cond=whenEvent("action"))
				}	 
				state("testPipeline") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("action(ARG0,ARG1,ARG2,ARG3,ARG4)"), Term.createTerm("action(check,NUMBER,_,_,_)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								solve("assert(done(check,${payloadArg(1)}))","") //set resVar	
								forward("actionComplete", "actionComplete(ok)" ,"butler_solver" ) 
						}
						if( checkMsgContent( Term.createTerm("action(ARG0,ARG1,ARG2,ARG3,ARG4)"), Term.createTerm("action(_,_,_,_,_)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("action", "action(${payloadArg(0)},${payloadArg(1)},${payloadArg(2)},${payloadArg(3)},${payloadArg(4)})" ,"butler_test_handler" ) 
						}
					}
					 transition(edgeName="t021",targetState="handleTest",cond=whenDispatch("action"))
				}	 
				state("handleTest") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("action(ARG0,ARG1,ARG2,ARG3,ARG4)"), Term.createTerm("action(wait,TIME,_,_,_)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								solve("assert(done(wait,${payloadArg(1)}))","") //set resVar	
								delay(payloadArg(1).toLong()*2000)
								forward("actionComplete", "actionComplete(ok)" ,"butler_solver" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitAction", cond=doswitch() )
				}	 
			}
		}
}

/* Generated by AN DISI Unibo */ 
package it.unibo.fridge_cmd_solver

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Fridge_cmd_solver ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var reply = true
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('sysRules.pl')","") //set resVar	
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
					}
					 transition(edgeName="t033",targetState="examineCmd",cond=whenEvent("msgFridge"))
					transition(edgeName="t034",targetState="examineCmd",cond=whenEvent("exposeFood"))
				}	 
				state("examineCmd") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("msgFridge(ACTION,NAME,CATEG)"), Term.createTerm("msgFridge(aggiungi,NAME,CATEGORY)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								solve("assert(received(${payloadArg(0)},${payloadArg(1)},${payloadArg(2)}))","") //set resVar	
								forward("fridge_handleAdd", "fridge_handleAdd(${payloadArg(1)},${payloadArg(2)})" ,"fridge_model_handler" ) 
						}
						if( checkMsgContent( Term.createTerm("msgFridge(ACTION,NAME,CATEG)"), Term.createTerm("msgFridge(rimuovi,NAME,CATEGORY)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								solve("assert(received(${payloadArg(0)},${payloadArg(1)},${payloadArg(2)}))","") //set resVar	
								forward("fridge_handleRemove", "fridge_handleRemove(${payloadArg(1)},${payloadArg(2)})" ,"fridge_model_handler" ) 
						}
						if( checkMsgContent( Term.createTerm("msgFridge(ACTION,NAME,CATEG)"), Term.createTerm("msgFridge(conferma,NAME,CATEGORY)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								storeCurrentMessageForReply()
								solve("assert(received(${payloadArg(0)},${payloadArg(1)},${payloadArg(2)}))","") //set resVar	
								forward("fridge_handleQuery", "fridge_handleQuery(${payloadArg(1)},${payloadArg(2)})" ,"fridge_model_handler" ) 
						}
						if( checkMsgContent( Term.createTerm("exposeFood"), Term.createTerm("exposeFood"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								solve("assert(received(exposeFood))","") //set resVar	
								forward("fridge_handleExposeFood", "fridge_handleExposeFood" ,"fridge_model_handler" ) 
						}
						if( checkMsgContent( Term.createTerm("msgFridge(ACTION,NAME,CATEG)"), Term.createTerm("msgFridge(null,null,null)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								solve("assert(received(${payloadArg(0)},${payloadArg(1)},${payloadArg(2)}))","") //set resVar	
						}
					}
					 transition(edgeName="t035",targetState="waitCmd",cond=whenDispatchGuarded("fridge_done",{!reply}))
					transition(edgeName="t036",targetState="replyThenWaitCmd",cond=whenDispatchGuarded("fridge_done",{reply}))
				}	 
				state("replyThenWaitCmd") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("fridge_done(STATUS)"), Term.createTerm("fridge_done(STATUS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("$name in ${currentState.stateName} | $currentMsg")
								replyToCaller("replyFridge", "replyFridge(${payloadArg(0)})")
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}
